@page "/"

@using QuizWars.Shared.Models.Response
@using QuizWars.Sdk
@using QuizWars.Shared.Models.Request
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using QuizWars.Shared.Models

@attribute [Authorize]

@implements IAsyncDisposable

@inject IDialogService DialogService
@inject IHowl Howl
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation
@inject QuizWarsClient QuizWars

<PageTitle>Home</PageTitle>

<MudGrid>
    @foreach (var topic in Topics)
    {
        <MudItem xs="6" sm="4" md="3">
            <MudCard Class="rounded-lg">
                <MudCardMedia Image="@topic.GetImageUrl()"/>
                <MudCardHeader>@topic.Title</MudCardHeader>
                <MudCardContent>@topic.Description</MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => Play(topic))">
                        Play!
                    </MudButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Error"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default"/>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code
{

    private HubConnection? _hub;
    private List<TopicResponse> Topics { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        _ = RequestNotificationSubscriptionAsync();
        Topics = await QuizWars.Topics.GetTopics();

        _hub = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hubs/notification"))
            .Build();

        _hub.On<NotificationResponse>("ReceiveNotification", ShowNotification);

        await _hub.StartAsync();
    }
    
    private async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await JsRuntime.InvokeAsync<NotificationSubscriptionData?>("push.request");
        if (subscription is not null)
        {
            try
            {
                await QuizWars.Notifications.Subscribe(subscription);
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }
    }

    private async Task Play(TopicResponse topic)
    {
        var opponent = await SelectUser();
        if (opponent is null)
        {
            return;
        }

        var request = new CreateGameRequest(topic.Id, opponent.UserId);
        var game = await QuizWars.Games.CreateGame(request);

        Navigation.NavigateTo($"game/{game.Identifier}/play");
    }

    private async Task<UserInfo?> SelectUser()
    {
        var dialog = await DialogService.ShowAsync<SelectUserDialog>("Select Opponent");
        var result = await dialog.Result;
        return result.Data as UserInfo;
    }

    private async Task ShowNotification(NotificationResponse notification)
    {
        await Howl.Play("/audio/notification.mp3");
        
        var parameters = new DialogParameters<NotificationDialog> { { x => x.Notification, notification } };
        await DialogService.ShowAsync<NotificationDialog>("Notification", parameters);
    }

    public ValueTask DisposeAsync()
    {
        return _hub?.DisposeAsync() ?? ValueTask.CompletedTask;
    }
}